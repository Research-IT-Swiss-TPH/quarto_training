---
title: ðŸ“˜ Introduction
subtitle: Analytically reproducible documents
author:
  - name:
      given: HÃ©lÃ¨ne
      family: Langet
    affiliations:
      - name: Swiss TPH Research-IT
    orcid: 0000-0002-6758-2397
    email: helene.langet@swisstph.ch
license: "CC-BY"
date: last-modified
editor: source

format:
  html:
    default: true
    embed-resources: true
    code-link: true
    code-overflow: wrap
    theme: cosmo
    toc: true
    number-sections: true
    anchor-sections: true
    title-block-banner: true
    comments:
      hypothesis: 
        theme: classic

execute:
  echo: fenced
  warning: false
  
engine: knitr
nocite: |
  @epirhandbook, @quartowebsites
---

# Research = a dynamic process

-   Research insights are typically disseminated through reports (e.g., scientific presentations, publications, etc), including a textual narrative detailing the research context, methods, and key findings, often supplemented with figures and tables to summarize results, and a final discussion, with findings serving as evidence to support conclusions and recommendations ;
-   Research is an **iterative** and **dynamic** process, meaning there are no **final** or **definitive** results or reports ;
-   In addition, we continuously build upon the work of others to generate new insights and discoveries.

![Image reproduced from Jorge Cham at [PhDComics](https://phdcomics.com/comics/archive.php?comicid=1689).](images/phd031214s.gif){#fig-research-challenges fig-align="center"}

# Reproducibility in research

Achieving reproducibility requires clear access to the underlying **data**, the **code** used for analysis, and the **results** produced. It also depends on documenting the **tools**, such as software and libraries, alongside the **computational environment**, including hardware configurations and operating systems [@turingway].

![ Illustration highlighting the key components of reproducibility in research, including data, code, results, tools, and the computational environment. This illustration is adapted from the one created by Scriberia with The Turing Way community, used under a CC-BY 4.0 licence. DOI: [10.5281/zenodo.3332807](https://zenodo.org/records/13882307).](../images/reproducibility.png){#fig-reproducibility fig-align="center"}

# Analytically reproducible documents

Analytically reproducible documents typically contain 3 main types of content, integrating code and natural language in a way that is called "*literate programming*" [@knuth_literate_1984].

::: panel-tabset
### Formatted text

These are languages that can be written using any **plain text editor**. They use *markup* elements to define how text should be displayed or printed.

::: columns
::: {.column width="33%"}
#### HTML

HTML is used to structure content on the web.

```{r}
#| echo: false
cat("<b>This text will be displayed in bold</b>")
```
:::

::: {.column width="33%"}
#### LaTeX

LaTeX is used for academic and technical documents.

```{r}
#| echo: false
cat("\\textbf{This text will be displayed in bold}")
```
:::

::: {.column width="33%"}
#### Markdown

Markdown is a lightweight markup language.

```{r}
#| echo: false
cat("**This text will be displayed in bold**")
```
:::
:::

### Code commands

Different programming languages allow us to execute code to generate results or perform tasks.

::: columns
::: {.column width="33%"}
#### R

```{{r}}
library(ggplot2)
data.frame(country=c("Nigeria","Kenya","India"), prevalence=c(14.5,9.2,3.5)) |>
  ggplot(aes(x=country, y=prevalence)) +
  geom_bar(stat="identity", fill="steelblue")
```
:::

::: {.column width="33%"}
#### Python

```{r}
library(reticulate)
Sys.setenv(RETICULATE_PYTHON = "C:/ProgramData/anaconda3/python.exe")
```

```{{python}}
import matplotlib.pyplot as plt
plt.bar(['Nigeria', 'Kenya', 'India'], [14.5, 9.2, 3.5], color='steelblue')
plt.show()
```
:::

::: {.column width="33%"}
#### Observable JS

```{{ojs}}
BarChart({x: ["Nigeria", "Kenya", "India"], y: [14.5, 9.2, 3.5], yLabel: "Prevalence (%)"})
```
:::
:::

### Code outputs

The output from executing code often results in visualizations or printed results. Below are the corresponding outputs for each language:

::: columns
::: {.column width="33%"}
```{r}
#| echo: false
load(file = "../practicals/df1.RData")
df <- df |>
  dplyr::mutate(dplyr::across(c(sex, confirmed, death),
                              as.factor))
glm(confirmed ~ age,
    df,
    family = binomial)
```
:::

::: {.column width="33%"}
```{r}
#| echo: false
iris |>
  dplyr::select(Species, Sepal.Length) |> 
  dplyr::rename(c1 = Species,
                c2 = Sepal.Length) |> 
  head(5)  |>
  knitr::kable()
```
:::

::: {.column width="33%"}
```{r}
#| fig-height: 4
#| fig-width: 4
#| echo: false
library(ggplot2)
data.frame(country=c("Nigeria","Kenya","India"), prevalence=c(14.5,9.2,3.5)) |>
  ggplot(aes(x=country, y=prevalence)) +
  geom_bar(stat="identity", fill="steelblue")
```
:::
:::
:::

Documents can be rendered in different type of outputs e.g., MS Word, PDF, HTML, PowerPoint, etc.

**Pandoc** is a powerful open-source tool that enables seamless **conversion** between various document formats, making it an essential resource for working with markup languages like Markdown, HTML, and LaTeX. By using Pandoc, you can easily transform a document written in one markup language into a wide range of output formats, including MS Word, PDF, HTML, PowerPoint, and more, without needing to manually adjust formatting or structure. This versatility makes Pandoc particularly valuable in workflows that involve literate programming, where formatted text, code commands, and outputs are integrated. Pandoc also supports templates and extensions, allowing users to customize the output to meet specific stylistic or formatting requirements, simplifying the process of producing polished, professional documents.

![Artwork by Allison Horst.](../images/qmd_render_schema.png){#fig-render-schema}

# Existing tools for writing analytically reproducible documents

![Existing tools for writing analytically reproducible documents](../images/tools.png){#fig-tools fig-align="center"}

# Quarto

-   Quarto is the successor to R Markdown, but is not tied to the R language.
-   Quarto files have a `.qmd` extension.

![Artwork by Allison Horst.](../images/quarto_schematic.png){#fig-quarto}

::: columns
::: {.column width="50%"}
## Source document

![](../images/qmd_structure.png)
:::

::: {.column width="50%"}
## Rendered output

![](../images/qmd_rendered.png)
:::
:::

## Quarto rendered outputs

-   Quarto documents can be rendered into to many report formats including HTML, Word document and many more
-   [List of supported formats](https://quarto.org/docs/output-formats/all-formats.html)

![](images/clipboard-1220364644.png){fig-align="center"}

## Engines

An engine refers to the software or system that executes the embedded code within a document. The engine takes the code chunks written in a specific programming language (e.g., R, Python, or Julia), runs them, and returns the output, which is then incorporated into the rendered document.

Both knitr and Jupyter serve as engines to execute code embedded within a document, but they work in different programming environments.

::: panel-tabset
### knitr

This R package will read the code chunks, execute it, and 'knit' it back into the document. This is how tables and graphs are included alongside the text.

![](images/knitr-rmarkdown-logos-50-1.webp){fig-align="center" width="300"}

### Juypter

Jupyter is a popular engine for running Python code interactively. It supports multiple programming languages, but Python is the most common.

![](images/images.png){fig-align="center"}
:::

# Other resources

https://www.fun-mooc.fr/en/courses/reproducible-research-methodological-principles-transparent-scie/ (in French)
https://www.fun-mooc.fr/en/courses/reproducible-research-ii-practices-and-tools-for-managing-comput/
