---
title: "Getting started with Quarto"

author:
  - name:
      given: Hélène
      family: Langet
    affiliations:
      - name: Swiss TPH Research-IT
    orcid: 0000-0002-6758-2397
license: "CC-BY"
date: last-modified

format:
  html:
    embed-resources: true
    theme: cosmo
    toc: true
    number-sections: true
    anchor-sections: true
    title-block-banner: true
    
execute:
  echo: fenced
  warning: false
---


::: {.callout-important}
## Learning objectives

1. Create Quarto documents
2. Setup the R environemnt to run Quarto documents
3. Edit Quarto documents

:::

## Create a new Quarto document

Quarto documents can be created and edited in RStudio. 

In RStudio, you can create a new Quarto document by selecting **File** \> **New File** \> **Quarto Document...**

![](images/paste-A7DE8B60.png)

When you create a new Quarto document, RStudio tries to be helpful by allowing you to select a template which explains the different section of an R Markdown script. R Studio will enable you select options to pick from to generate a template Quarto document to start from.

The title and the author names are not important. If the output document type you want is not one of these, do not worry - you can just pick any one and change it manually later.

Let us select *HTML* to create an html document.

Click on create to open up a new Quarto (`.Qmd`) document.

![](images/paste-67B97E04.png)

## Setup your R environnment

You need to ensure required packages are available

![](images/quarto_packages.png)

## Quarto document structure

At the top of the Quarto file, you will see something that looks a bit like this:

```
---
title: "Reproducible documents"
author: "Your Name"
date: "6/18/2020"
output: html_document
---
```


This section is called the YAML header and it contains commands and metadata about the document. Most Markdown documents have this YAML header at the top of the document and they are always surrounded by --- on the top and bottom of the section. YAML is a data format that has the form of a key: value pairing to store data. The keys in this case are title, author, date, and output. The values are those that follow the key (e.g. “Your Name” for author). In the case of R Markdown, these key data are used to store the settings that R Markdown will use to create the output document. The keys listed above are some of many settings that R Markdown has available to use.

In the case of this YAML header, the R Markdown document will generate an HTML file because of the output: html_document setting. You can also create a word document with output: word_document. While PDF documents are also able to be created, they require installing LaTeX through the R package tinytex, which can sometimes be complicated to install. So we will only cover HTML and Word documents in this session.

There are three basic components to a Quarto document, similar to the components of a R Markdown document:

-   metadata (YAML header)
-   text (markdown formatting)
-   code (R code formatting)

![](images/paste-30C30ECC.png)

::: panel-tabset
### YAML header

The very top of the document consists of a (YAML) header surrounded by --- lines. Here you may want to edit the title of your document. The other settings in the header define the default document type produced (Microsoft Word) when the RMarkdown is "knit". the information intended to produce an html output.

### Text

In WHITE background areas, any text will appear as regular text in the final report. Can have formatting such as headings, italics, bold, numbers, and bullets. See the second page of this RMarkdown cheatsheet for more detail. Can display parameters derived from your data via in-line code (such as epi week of the outbreak peak, as in the example above).

### Code chunks

In gray background "code chunks", RMarkdown is running R commands. These commands perform data processing and cleaning steps, or could produce visual outputs in the document.
:::

## Document editing

### Visual Editor

The RStudio Visual Editor is quite new and has features that improve your writing experience. Working in the Visual Editor feels a bit like working in a Google Doc.

Here's an example showing the same file in the original Source Editor with content in markdown format and in the Visual Editor with content that looks more like it will appear in a live site. You can switch freely between these modes.

## Running R code

To write and execute code in Quarto, you will use **code chunks**. You can embed R code in *code chunks* as is displayed below

```{r}
1 + 1
```

### Create code chunks

::: callout-tip

Here are some tips for creating code chunks in RStudio

* **Backticks**: use three backticks to start and end a code chunk.
* **Toolbar icon**: you can also start a code chunk by clicking the appropriate icon in the toolbar.
* **Keyboard shortcut**: for a quicker method, use the keyboard shortcut `Ctrl` + `Alt` + `I`

:::

### Options

You can add options to executable code like this

```{r}
#| echo: false
2 * 2
```

The `echo: false` option disables the printing of code (only output is displayed).

### Tables

How to display data

```{r}
iris |>
  head(10)
```

This is not really beautiful.

```{r}
iris |>
  head(10)  |>
  knitr::kable()
```

::: callout-tip

There are other R packages to make fancy tables.

:::

### Multilanguage

As the number of programming languages used for scientific discourse is very broad, Quarto was developed to be multilingual, beginning with R, Python, Javascript, and Julia. building on the RStudio (R) and Jupyter (Python, Julia) ecosystems which are very popular. Stata is not a language supported by Quarto.

## Quarto render

When you click the **Render** button a document will be generated that includes both content and the output of embedded code.

![](images/paste-A8386DC4.png)


## References

-   [The Epidemiologist R Handbook](https://epirhandbook.com)
