---
title: "Getting started with Quarto"

author:
  - name:
      given: Hélène
      family: Langet
    affiliations:
      - name: Swiss TPH Research-IT
    orcid: 0000-0002-6758-2397
  - name:
      given: Zhihan
      family: Zhu
    affiliations:
      - name: Swiss TPH Research-IT
license: "CC-BY"
date: last-modified

format:
  html:
    embed-resources: true
    theme: cosmo
    toc: true
    number-sections: true
    anchor-sections: true
    title-block-banner: true
    comments:
      hypothesis: 
        theme: classic
    
execute:
  echo: fenced
  warning: false
---

::: callout-important
## Learning objectives

1.  Create a Quarto document
2.  Setup the R environment to be able to use and render Quarto documents
3.  Edit Quarto documents
4.  Render Quarto documents in different formats
:::

## Create a new Quarto document

Quarto documents can be created and edited in RStudio.

In RStudio, you can create a new Quarto document by selecting 

> **File** \> **New File** \> **Quarto Document...**

![](images/create_quarto.png)

When you create a new Quarto document, RStudio tries to be helpful by allowing you to select a template which explains the different section of an R Markdown script. R Studio will enable you select options to pick from to generate a template Quarto document to start from.

The title and the author names are not important. If the output document type you want is not one of these, do not worry - you can just pick any one and change it manually later.

Let us select *HTML* to create an html document.

Click on create to open up a new Quarto (`.Qmd`) document.

![](images/paste-67B97E04.png)

## Setup your R environnment

You need to ensure required packages are available

![](images/quarto_packages.png)

## Exploring the structure of the Quarto document

There are three basic components to a Quarto document.

::: panel-tabset
### Header

At the top of the Quarto document, you will see something that looks as follows:

```         
---
title: "Untitled"
format: html
---
```

This section is called the **YAML header** and it contains commands and metadata about the Quarto document. There is only one unique header in a Quarto document and it is always surrounded by `---` lines on the top and bottom of the section.

YAML is a data format that has the form of a **key: value pairing** to store data. The keys in this case are *title* and *format*. The values are those that follow the key (e.g., “Untitled” for title). These key data are used to store the settings that Quarto will use to render the output document. The keys listed above are some of many settings that Quarto has available to use.

### Formatted text

In white background areas, any text will appear as regular text in the final report. This is actually a markup language, which can have formatting such as headings, italics, bold, numbers, and bullets. See the second page of this RMarkdown cheatsheet for more detail. Can display parameters derived from your data via in-line code (such as epi week of the outbreak peak, as in the example above).

### Code

Code chunks, typically shown within gray backgrounds, execute commands in Quarto. In the example provided, R code is being run within these chunks. These commands may handle data processing, cleaning, or the generation of visual outputs that are integrated into the final document.
:::

![](images/paste-30C30ECC.png)

## Document editing

### Visual Editor

The RStudio Visual Editor is a relatively new feature designed to enhance the writing experience by providing an intuitive interface. It offers a more user-friendly experience, similar to working in a Google Doc, allowing for seamless content creation and editing.

In the Visual Editor, you can preview your document in a format that closely resembles its final rendered appearance. This contrasts with the Source Editor, where content is written in markdown syntax. The ability to switch between these two modes allows for flexibility, depending on your preference or task.

Below is an example of the same file viewed in both the Source Editor and the Visual Editor:

![](images/Quarto_editor.PNG)

### Useful resources

-   [Quarto Documentation - Visual Editing in RStudio](https://quarto.org/docs/visual-editor/)
-   [Quarto Documentation - Markdown Basics](https://quarto.org/docs/authoring/markdown-basics.html)

## Running R code

To write and execute code in Quarto, you will use **code chunks**. You can embed R code in *code chunks* as is displayed below

```{r}
1 + 1
```

### Create code chunks

::: callout-tip
Here are some tips for creating code chunks in RStudio

-   **Backticks**: use three backticks to start and end a code chunk.
-   **Toolbar icon**: you can also start a code chunk by clicking the appropriate icon in the toolbar.
![](images/toolbar_icon_add_chunk_1.PNG)
-   **Keyboard shortcut**: for a quicker method, use the keyboard shortcut `Ctrl` + `Alt` + `I`
:::

### Tables

Displaying data can be achieved with simple commands. For instance, to show the first 10 rows of the `iris` dataset, one can use:

```{r}
iris |>
  head(10)
```

To improve the readability of tables, the `knitr::kable()` function provides a more structured and formatted output:

```{r}
iris |>
  head(10)  |>
  knitr::kable()
```

::: callout-tip
Additional R packages can be used for more advanced and aesthetically refined tables.
:::

### Multilanguage

As the number of programming languages used for scientific discourse is very broad, Quarto was developed to be multilingual, beginning with R, Python, Javascript, and Julia. building on the RStudio (R) and Jupyter (Python, Julia) ecosystems which are very popular. Stata is not a language supported by Quarto.

## Rendering

When you click the **Render** button a document will be generated that includes both content and the output of embedded code.

![](images/paste-A8386DC4.png)

In the case of this YAML header, the Quarto document will generate an HTML file because of the `format: html` setting.

### Code errors

If you attempt to render the document with code chunks that contain errors, the rendering process will fail. Therefore, it's essential to ensure that all code chunks run successfully in sequence before rendering the document.

### Options

You can add options to executable code like this:

```{{r}}
#| echo: false
2 * 2
```

The `echo: false` option disables the printing of code (only output is displayed). In this example, it will print:

```{r}
#| echo: false
2 * 2
```

Additionally, you can apply such options globally by specifying them in the YAML header, which configures settings for the entire document. It is important to note that the YAML header is indentation-sensitive and relies on proper whitespace formatting.

### Editing the header

Here you may want to edit the title of your document.

You can also create a word document with `output: word_document`. While PDF documents are also able to be created, they require installing LaTeX through the R package tinytex, which can sometimes be complicated to install.

You can run the following chunk to get tinytex.

```{r}
#| eval: false
install.packages("tinytex")
tinytex::install_tinytex()
```


### Execute R code within the text

Inline code allows you to execute code within markdown, e.g. to automatically use the most up-to-date computations in narrative. Quarto provides an inline code syntax that works across all three engines (Jupyter, Knitr and OJS).

The syntax for inline code is similar to code blocks, except you use a single tick (\`) rather than triple ticks (\`\`\`), and you can use it in the middle of markdown. Here is an example storing the variable in a code block and then print it in a sentence using inline code:

```{r}
comment <- "AWESOME"
```

You can print the sentence like this:

```
This lecture is `{{r}} comment`!
```

The result of the commented code is the following output:

`This lecture is `{r} comment`!`

Inline expressions are always evaluated when rendering and previewing .qmd files.

## References

-   [The Epidemiologist R Handbook](https://epirhandbook.com)
-   [Analytically reproducible documents](https://r-cubed-v2.rostools.org/reproducible-documents)
