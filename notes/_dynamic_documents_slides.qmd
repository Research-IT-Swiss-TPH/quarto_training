---
title: Analytically reproducible documents

author:
  - name:
      given: HÃ©lÃ¨ne
      family: Langet
    affiliations:
      - name: Swiss TPH Research-IT
    orcid: 0000-0002-6758-2397
    email: helene.langet@swisstph.ch
license: "CC-BY"
date: last-modified
editor: source

format:
  revealjs:
    default: true
    embed-resources: true
    logo: ../images/swisstph_logo_compact.png
    css: ../css/logo.css
    footer: "Swiss TPH, Research-IT"
    code-overflow: wrap
    smaller: true
    slide-number: true
    show-slide-number: all
  html:
    default: true
    embed-resources: true
    code-link: true
    code-overflow: wrap
    theme: cosmo
    toc: true
    number-sections: true
    anchor-sections: true
    title-block-banner: true
    comments:
      hypothesis: 
        theme: classic
    
execute:
  echo: fenced
  warning: false
  
engine: knitr
---

## ðŸŽ¯ Learning objectives

The goal of this training is to briefly present why we want to learn how to create **analytically reproducible documents**, the benefits, and the barriers to using it.

-   Understand the concept of analytically reproducible documents and where Quarto fits within the landscape of existing tools ;
-   Consider the benefits and limitations of using analytically reproducible documents for your research and applications in global health.
-   Practice Quarto in RStudio for creating dynamic documents.

::: aside
Some additional commentary of more peripheral interest.
:::

## Introduction

The output of research usually results in a report (e.g., a scientific publication), that includes a textual narrative of your findings, along with figures and tables derived from your analysis. This report not only summarizes the results but also discusses findings, with the data serving as evidence to support your conclusions and recommendations.

Consider the following scenarios:

1. You are informed that you used the wrong dataset just as you finalize your article for journal submission. A new dataset is provided, and you are asked to rerun the analysis with this updated data.
2. You discover an error in your analysis and need to re-examine the code, fix the error, and re-run the analysis
3. A PhD student needs to use your code and reproduce the results to understand your methodology as a benchmark, before developing more advanced methods.

Such situations are quite common in data science.

It is actually possible to keep your data science projects organized with RStudio so that re-running an analysis and recreating reports is straightforward and can be done with minimal effort. Dynamic documents can be produced to update on a routine basis (e.g. daily surveillance reports) and/or run on subsets of data (e.g. reports for each jurisdiction).

## Types of content

Analytically reproducible documents typically contain 3 main types of content

::::: {.panel-tabset}

### Formatted text

These are languages that can be written using any plain text editor^[in comparison to "*What You See Is What You Get*" (WYSIWYG) languages, such as Microsoft Word]. They use *markup* elements to define how text should be displayed or printed.

:::: {.columns}

::: {.column width="33%"}

#### HTML

HTML is used to structure content on the web. 

```{r}
#| echo: false
cat("<b>This text will be displayed in bold</b>")
```

:::

::: {.column width="33%"}

#### LaTeX

LaTeX is used for academic and technical documents.

```{r}
#| echo: false
cat("\\textbf{This text will be displayed in bold}")
```

:::

::: {.column width="33%"}

#### Markdown

Markdown is a lightweight markup language.

```{r}
#| echo: false
cat("**This text will be displayed in bold**")
```

:::

::::

### Code commands

Different programming languages allow us to execute code to generate results or perform tasks. Here are examples of commands in various languages:

:::: {.columns}

::: {.column width="33%"}

#### R

```{{r}}
library(ggplot2)
data.frame(country=c("Nigeria","Kenya","India"), prevalence=c(14.5,9.2,3.5)) |>
  ggplot(aes(x=country, y=prevalence)) +
  geom_bar(stat="identity", fill="steelblue")
```

:::

::: {.column width="33%"}

#### Python

```{r}
#| echo: false
library(reticulate)
```

```{{python}}
import matplotlib.pyplot as plt
plt.bar(['Nigeria', 'Kenya', 'India'], [14.5, 9.2, 3.5], color='steelblue')
plt.show()
```

:::

::: {.column width="33%"}

#### Observable JS

```{{ojs}}
BarChart({x: ["Nigeria", "Kenya", "India"], y: [14.5, 9.2, 3.5], yLabel: "Prevalence (%)"})
```

:::

::::

### Code outputs

The output from executing code often results in visualizations or printed results. Below are the corresponding outputs for each language:

:::: {.columns}

::: {.column width="33%"}

```{r}
#| echo: false
library(ggplot2)
data.frame(country=c("Nigeria","Kenya","India"), prevalence=c(14.5,9.2,3.5)) |>
  ggplot(aes(x=country, y=prevalence)) +
  geom_bar(stat="identity", fill="steelblue")
```

:::

::: {.column width="33%"}

```{python}
#| echo: false
import matplotlib.pyplot as plt
plt.bar(['Nigeria', 'Kenya', 'India'], [14.5, 9.2, 3.5], color='steelblue')
plt.show()
```

:::

::: {.column width="33%"}

```{ojs}
#| echo: false
// A simple bar chart using Observable's Plot library
Plot.plot({
  marks: [
    Plot.barY(
      {x: ["Nigeria", "Kenya", "India"], y: [14.5, 9.2, 3.5]},
      {fill: "steelblue"}
    )
  ],
  y: {label: "Prevalence (%)"}
})
```

:::

::::

:::::

## Quarto

:::: {.columns}

::: {.column width="50%"}

### *.Qmd

![](images/qmd_structure.png)

:::

::: {.column width="50%"}

### Rendered document

![](images/qmd_rendered.png)

:::

::::

## Rendered outputs

* Outputs get updated automatically every time the document is processed.
* Can be rendered into to many report formats including HTML, Word document and many more

## Tools

![](images/tools.png)

## Background to R Markdown

This is possible due to the fact that Quarto documents enable code and textual descriptions to be combined into the same document, and the figures and tables produced by the code are automatically added to the document.

Quarto is a tool that allows you integrate your code, text and figures in a single file in order to make high quality, reproducible reports. A paper published with an included quarto file and data sets can be reproduced by anyone with a computer. R Markdown integrates code and natural language in a way that is called "literate programming" [@knuth_literate_1984].

While it makes sense to use Quarto going forward, there are still a lot of resources written for and in R Markdown.

To explain some of the concepts and packages involved:

::: panel-tabset
### Markdown

Markdown is a "*language*" that allows you to write a document using plain text, that can be converted to HTML (a markup language used for structuring and presenting content on the web) and other formats. It is not specific to R.

Markdown files have a `md` extension.

### R Markdown

It is a variation on markdown that is specific to R - it allows you to write a document using markdown to produce text and to embed R code and display their outputs. which was a variant of Markdown specifically designed to allow R code chunks to be included.

R Markdown is a widely-used tool for creating automated, reproducible, and share-worthy outputs, such as reports. It can generate static or interactive outputs, in Word, pdf, html, powerpoint, and other formats.

R Markdown files have `.Rmd` extension.

### rmarkdown

It is the R package: This is used by R to render the .Rmd file into the desired output.

:::

## Quarto

* Quarto is the successor to R Markdown.
* You can create an entire formatted document, including narrative text (can be dynamic to change based on your data), tables, figures, bullets/numbers, bibliographies, etc.

Quatro uses a mark-up language similar to HyperText Markup Language (HTML) or LaTeX, in comparison to a "What You See Is What You Get" (WYSIWYG) language, such as Microsoft Word. This means that all the aspects are consistent, for instance, all top-level heading will look the same. But it means that we use symbols to designate how we would like certain aspects to appear. And it is only when we build the mark-up that we get to see what it looks like. A visual editor option can also be used which hides the need for the user to do this mark-up themselves.

Quarto is not tied to the R language.

Quarto files have a `.Qmd` extension.

https://quarto.org/docs/output-formats/all-formats.html

## Engine

::: panel-tabset
### knitr

This R package will read the code chunks, execute it, and 'knit' it back into the document. This is how tables and graphs are included alongside the text.

### Juypter

:::

## Pandoc

Pandoc actually convert the output into word/pdf/powerpoint etc. It is a software separate from R but is installed automatically with RStudio.


![](images/paste-ABFB521E.png)

The process that happens in the background involves feeding the .Rmd file to knitr, which executes the R code chunks and creates a new .md (markdown) file which includes the R code and its rendered output. The .md file is then processed by Pandoc to create the final product: a Microsoft Word document, HTML file, PowerPoint document, PDF, etc.

## References

-   [The Epidemiologist R Handbook](https://epirhandbook.com)
-   [Websites and dashboards with Quarto](https://thegraphcourses.org/courses/websites-and-dashboards-with-r/)
