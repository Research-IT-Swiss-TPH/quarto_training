---
title: ðŸ“˜ Integrating R and Python in a single Quarto notebook environment
author:
  - name:
      given: HÃ©lÃ¨ne
      family: Langet
    affiliations:
      - name: Swiss TPH Research-IT
    orcid: 0000-0002-6758-2397
    email: helene.langet@swisstph.ch
license: "CC-BY"
date: last-modified
editor: source
lang: en-US

format:
  html:
    default: true
    embed-resources: true
    code-tools: true
    code-overflow: wrap
    code-block-bg: true
    code-block-border-left: "#c03427"
    theme: cosmo
    anchor-sections: true
    title-block-banner: true
    comments:
      hypothesis: 
        theme: classic
    format-links: [pdf]
  pdf:
    default: true
    
execute:
  echo: fenced
  warning: false
---

## Learning objectives ðŸŽ¯ 

- Learn how to integrate Python in a Quarto notebook primarily using R code chunks ;
- Learn how to write and execute Python code chunks in a Quarto notebook ;
- Learn how to seamlessly share data frames and other objects between R and Python code chunks for a cohesive, mixed-language workflow.

## Setup your R environment

To integrate Python within a Quarto notebook that primarily uses R code chunks (i.e., executed with the `knitr` engine), you will need the `reticulate` R package, which serves as a bridge between R and Python, allowing you to run Python code chunks alongside R and share objects between the two programming languages. This setup provides a powerful approach for combining Râ€™s statistical capabilities with Pythonâ€™s data manipulation and machine learning tools, enabling a robust, mixed-language workflow within Quarto.

Install `reticulate` if it is not already installed.

```{r}
install.packages("reticulate")
```

To ensure that R uses the correct Python executable, specify the path to Python using the `Sys.setenv()` function. This is especially important if you have multiple Python installations on your system or are using a specific environment, such as Anaconda. Replace *"C:/ProgramData/anaconda3/python.exe"* with the path to your Python executable. 

::: callout-tip
You can also set environment variables permanently in your R environment variables by defining them in the `.Renviron` file.
:::

```{r}
Sys.setenv(RETICULATE_PYTHON = "C:/ProgramData/anaconda3/python.exe")
```

::: callout-important
Consistently using the same Python environment in `reticulate` helps preventing version conflicts and package incompatibilities.
:::

Load `reticulate` at the beginning of your Quarto notebook.

```{r}
library(reticulate)
reticulate::use_python("C:/ProgramData/anaconda3/python.exe")
```

Use `py_config()` to verify that the correct Python version is active; this also allows you to confirm that required Python packages are available within your chosen environment.

```{r}
reticulate::py_config()
```

## Execute Python code

```{python}
import sys
print(f"Python executable path: {sys.executable}")
print(f"Python version: {sys.version}")
```

## Access R objects in Python

Below, we create a data frame in R using the built-in iris dataset, adding a new column called Sepal.Area to illustrate data manipulation in R. We use the dplyr package for simplicity and display the first few rows of the data frame using knitr::kable() for formatted output.

```{r}
#| label: tbl-1
#| tbl-cap: Data frame created, manipulated and displayed using R

library(dplyr)
df1 <- iris |>
  dplyr::mutate(Sepal.Area = Sepal.Length * Sepal.Width)
df1 |>
  head(5) |>
  knitr::kable()
```

As illustrated below, you can access R objects (here the data frame `df1`) as a Python object by calling them through the `r.` prefix. In this example, we access the R data frame df1 and manipulate it in Python by creating a new column, Petal.Area. Then, use `{python}` as the chunk language to specify Python chunks within your Quarto notebook.

```{python}
import pandas as pd
df2 = r.df1
df2["Petal.Area"] = df2["Petal.Length"] * df2["Petal.Width"]
```

## Access Python objects in R

As illustrated below, you can reciprocally access Python objects (here the data frame `df2`) as a R object by calling them through the `py$` prefix. Here, we access the Python data frame df2 in R and display the first few rows to confirm the changes.

```{r}
#| label: tbl-2
#| tbl-cap: Data frame read from a Python object and displayed using R

py$df2 |>
  head(5) |>
  knitr::kable()
```

In this example, df2 created in Python is now accessible in R. The py$ prefix provides a direct way to retrieve Python objects from the global environment into R. This allows for flexible back-and-forth interactions between R and Python without needing to export or save intermediate files.

## Best practices

* Ensure that data structures are compatible. For example, R data frames are automatically converted to pandas data frames in Python, but other complex R objects may not be directly accessible in Python.
* Keep in mind that transferring large data frames between R and Python may introduce some overhead. Where possible, limit the size of data passed across languages.