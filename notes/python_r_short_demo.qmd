---
title: "Quarto training for R"
subtitle: "ðŸ“˜ Interfacing R and Python with the knitr engine"
author:
  - name:
      given: HÃ©lÃ¨ne
      family: Langet
    affiliations:
      - name: Swiss TPH Research-IT
    orcid: 0000-0002-6758-2397
    email: helene.langet@swisstph.ch
license: "CC-BY"
date: last-modified
editor: source
lang: en-US

format:
  pdf:
    default: true
  html:
    default: true
    embed-resources: true
    theme: cosmo
    anchor-sections: true
    title-block-banner: true
    comments:
      hypothesis: 
        theme: classic
    format-links: [pdf]
    
execute:
  echo: fenced
  warning: false
---

## ðŸŽ¯ Learning objectives

- Learn how to integrate R and Python in a Quarto document.

## Instructions

You need to import the R package `reticulate` if you want to interface R and Python with the `knitr` engine.

```{r}
library(reticulate)
```

To ensure that R uses the correct Python executable, set the path to Python in your R environment using the `Sys.setenv()` function. For instance, let us assume your path is "C:/ProgramData/anaconda3/python.exe".

```{r}
Sys.setenv(RETICULATE_PYTHON = "C:/ProgramData/anaconda3/python.exe")
```

```{r}
#| label: tbl-1
#| tbl-cap: Data frame created, manipulated and displayed using R

library(dplyr)
df1 <- iris |>
  dplyr::mutate(Sepal.Area = Sepal.Length * Sepal.Width)
df1 |>
  head(5) |>
  knitr::kable()
```

As illustrated in @lst-1, you can access R objects (here the data frame `df1`) as a Python object by calling them through the `r.` prefix .

```{python}
#| lst-label: lst-1
#| lst-cap: Example of Python code chunk manipulating a R object

import pandas as pd
df2 = r.df1
df2["Petal.Area"] = df2["Petal.Length"] * df2["Petal.Width"]
```

As illustrated in @lst-2, you can reciprocally access Python objects (here the data frame `df2`) as a R object by calling them through the `py$` prefix.

```{r}
#| lst-label: lst-2
#| lst-cap: Example of R code chunk manipulating a Python object
#| label: tbl-2
#| tbl-cap: Data frame read from a Python object and displayed using R

py$df2 |>
  head(5) |>
  knitr::kable()
```
