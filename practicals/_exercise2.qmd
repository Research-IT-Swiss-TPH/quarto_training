---
title: "Quarto training for R - Exercise 2"
author: Unknown author
format: html
editor: visual
---

## About Quarto

Quarto enables you to weave together content and executable code into a rendered document. It can be used for generated reports, scientific publications, reproducible reports (e.g. monthly reports that are updated with new data), dashboards.

For those who were RMarkdown, Quarto is a multi-language, next-generation version of R Markdown from Posit and includes dozens of new features and capabilities while at the same being able to render most existing Rmd files without modification.

To learn more about Quarto, visit the [Quarto website](https://quarto.org).

A Quarto document is organized into the following three basic components:

-   **YAML header**: commands and metadata about the Quarto document
-   **text**: lightweight markup language, allowing various formatting
-   **code**: embedded executable code, in our example R code

You have the Quarto document and the corresponding rendered document, which can be a HTML, a DOCX, a PDF document based on the format you chose in the YAML header.

## Document editing

Text is written in **Markdown**, a lightweight markup language. Quarto documents can be edited in either source or visual mode.

### Task 1

We can see the same document in the two modes of the RStudio editor: visual (on the left) and source (on the right). RStudio’s visual editor offers a WYSIWYM authoring experience for markdown. For formatting (e.g., bolding text), you can use the toolbar, a keyboard shortcut (⌘B), or the markdown construct (**bold**). The plain text source code underlying the document is written for you, and you can view/edit it at any point by switching to source mode for editing. You can toggle back and forth between these two modes by clicking on Source and Visual in the editor toolbar.

Switch to *Source mode* using one of the following methods:

-   use the Source or Visual toggle at the top-left of the document toolbar
-   or alternatively the Ctrl Q Shift F4 keyboard shortcut)

The visual/source editor toggle is highlighted in both documents marking their current state.

### Question 1

What do you notice?

For users less comfortable with coding and more interested in rendered document, visual mode is recommended. For users comfortable with coding, source mode is probably preferable as it offers more control on what you are doing.

### Task 2

Add a level 4 header to your document. Switch the mode to check how the content will be rendered (visual mode) or what is the markdown syntax (source mode).

### Task 3

Write the following text in italic and bold:

Hello Quarto!

### Useful resources

-   [Quarto Documentation - Visual Editing in RStudio](https://quarto.org/docs/visual-editor/)
-   [Quarto Documentation - Markdown Basics](https://quarto.org/docs/authoring/markdown-basics.html)

## Running R code

You can embed R code in *code chunks* as is displayed below

```{r}
1 + 1
```

### Task 1

Add a new code chunk here.

### Task 2

Display data. To run the code in *notebook* mode, click the green arrow on the right side of the code chunk.

```{r}
df <- iris
head(df, 10) |> knitr::kable()
```

The chunk above will print the first 10 rows of the dataframe.

### Task 3

Run this chunk to set an initial value of a:

```{r}
a <- 1
a
```

And we update the value of a in the next chunk. Have a try on (1) clicking "Run Current Chunk" just once; (2) clicking "Run Current Chunk" several times.

```{r}
a <- a + 2
```

Remember how many times you clicked on the chunk above, and run the following chunk to print the value of a:

```{r}
print(a)
```

As we can see, every time we update the value of a, it iterates on the updated value rather than on the initial one. However, when we render the document, it simply runs every chunk ONCE in the order you put them. In order to avoid running the same chunk for multiple times, you can click "Run All Chunks Above". This will run every chunk before the current chunk ONCE in the order you put them.

## Render a document

When you click the **Render** button a document will be generated that includes both content and the output of embedded code. In the case of this YAML header, the Quarto document will generate an HTML file because of the `format: html` setting.

### Code errors

As a start, consider the following code chunk:

```{r}
# this chunk will throw error

# something <- "HELLO WORLD!"
print(something)
```

If you attempt to render the document with code chunks that contain errors, the rendering process will fail. Therefore, it's essential to ensure that all code chunks run successfully in sequence before rendering the document. In this case, uncommenting `something <- "HELLO WORLD!"` will resolve the error, allowing the document to render correctly.

### Options

In some cases, you may prefer not to show the actual code in the final document. To hide the code but still show the output, Quarto provides options such as `echo: false`, which disables the printing of code while retaining the output.

```{r}
#| echo: false
2 * 2
```

This option ensures only the result (`4` in this case) is displayed without showing the code itself.

Additionally, you can apply such options globally by specifying them in the YAML header, which configures settings for the entire document. It is important to note that the YAML header is indentation-sensitive and relies on proper whitespace formatting.

### Editing the header

#### Task 1

Add echo to the YAML header.

#### Task 2

Render the document to see the final output.

#### Task 3

Change the document format to docx. Render the document again.

#### Task 4

Change the document format to pdf. Try to render the document again.

As you might see, rendering pdf fails the first time you do it. This is because you should have tinytex installed before you render pdf. Get tinytex by running the following chunk:

```{r}
#| eval: false
install.packages("tinytex")
tinytex::install_tinytex()
```

After installing tinytex, try to render the document again. This time it should work.

### Execute R code within the text

Inline code allows you to execute code within markdown, e.g. to automatically use the most up-to-date computations in narrative. Quarto provides an inline code syntax that works across all three engines (Jupyter, Knitr and OJS).

The syntax for inline code is similar to code blocks, except you use a single tick (\`) rather than triple ticks (\`\`\`), and you can use it in the middle of markdown. For example, the following code stores the variable radius in a code block and then accesses it in a sentence using inline code:

You can embed R code within your text using inline code. For example, `{r} 2 + 2` will calculate and display the result directly in the text in the rendered document.

Inline expressions are always evaluated when rendering and previewing .qmd files.

## References

-   [The Epidemiologist R Handbook](https://epirhandbook.com)
-   [Analytically reproducible documents](https://r-cubed-v2.rostools.org/reproducible-documents)
